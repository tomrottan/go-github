{
  "name": "Go-GitHub",
  "tagline": "Go library for accessing the GitHub API",
  "body": "# go-github #\r\n\r\ngo-github is a Go client library for accessing the [GitHub API][].\r\n\r\n**Documentation:** [![GoDoc](https://godoc.org/github.com/google/go-github/github?status.svg)](https://godoc.org/github.com/google/go-github/github)  \r\n**Mailing List:** [go-github@googlegroups.com](https://groups.google.com/group/go-github)  \r\n**Build Status:** [![Build Status](https://travis-ci.org/google/go-github.svg?branch=master)](https://travis-ci.org/google/go-github)  \r\n**Test Coverage:** [![Test Coverage](https://coveralls.io/repos/google/go-github/badge.svg?branch=master)](https://coveralls.io/r/google/go-github?branch=master) ([gocov report](https://drone.io/github.com/google/go-github/files/coverage.html))\r\n\r\ngo-github requires Go version 1.4 or greater.\r\n\r\n## Usage ##\r\n\r\n```go\r\nimport \"github.com/google/go-github/github\"\r\n```\r\n\r\nConstruct a new GitHub client, then use the various services on the client to\r\naccess different parts of the GitHub API.  For example, to list all\r\norganizations for user \"willnorris\":\r\n\r\n```go\r\nclient := github.NewClient(nil)\r\norgs, _, err := client.Organizations.List(\"willnorris\", nil)\r\n```\r\n\r\nSome API methods have optional parameters that can be passed.  For example,\r\nto list public repositories for the \"github\" organization:\r\n\r\n```go\r\nclient := github.NewClient(nil)\r\nopt := &github.RepositoryListByOrgOptions{Type: \"public\"}\r\nrepos, _, err := client.Repositories.ListByOrg(\"github\", opt)\r\n```\r\n\r\n### Authentication ###\r\n\r\nThe go-github library does not directly handle authentication.  Instead, when\r\ncreating a new client, pass an `http.Client` that can handle authentication for\r\nyou.  The easiest and recommended way to do this is using the [oauth2][]\r\nlibrary, but you can always use any other library that provides an\r\n`http.Client`.  If you have an OAuth2 access token (for example, a [personal\r\nAPI token][]), you can use it with oauth2 using:\r\n\r\n```go\r\nfunc main() {\r\n  ts := oauth2.StaticTokenSource(\r\n    &oauth2.Token{AccessToken: \"... your access token ...\"},\r\n  )\r\n  tc := oauth2.NewClient(oauth2.NoContext, ts)\r\n\r\n  client := github.NewClient(tc)\r\n\r\n  // list all repositories for the authenticated user\r\n  repos, _, err := client.Repositories.List(\"\", nil)\r\n}\r\n```\r\n\r\nSee the [oauth2 docs][] for complete instructions on using that library.\r\n\r\nFor API methods that require HTTP Basic Authentication, use the\r\n[`BasicAuthTransport`](https://godoc.org/github.com/google/go-github/github#BasicAuthTransport).\r\n\r\n### Pagination ###\r\n\r\nAll requests for resource collections (repos, pull requests, issues, etc)\r\nsupport pagination. Pagination options are described in the\r\n`github.ListOptions` struct and passed to the list methods directly or as an\r\nembedded type of a more specific list options struct (for example\r\n`github.PullRequestListOptions`).  Pages information is available via\r\n`github.Response` struct.\r\n\r\n```go\r\nclient := github.NewClient(nil)\r\nopt := &github.RepositoryListByOrgOptions{\r\n  Type: \"public\",\r\n  ListOptions: github.ListOptions{PerPage: 10, Page: 2},\r\n}\r\nrepos, resp, err := client.Repositories.ListByOrg(\"github\", opt)\r\nfmt.Println(resp.NextPage) // outputs 3\r\n```\r\n\r\nFor complete usage of go-github, see the full [package docs][].\r\n\r\n[GitHub API]: https://developer.github.com/v3/\r\n[oauth2]: https://github.com/golang/oauth2\r\n[oauth2 docs]: https://godoc.org/golang.org/x/oauth2\r\n[personal API token]: https://github.com/blog/1509-personal-api-tokens\r\n[package docs]: https://godoc.org/github.com/google/go-github/github\r\n\r\n### Integration Tests ###\r\n\r\nYou can run integration tests from the `tests` directory. See the integration tests [README](tests/README.md).\r\n## Roadmap ##\r\n\r\nThis library is being initially developed for an internal application at\r\nGoogle, so API methods will likely be implemented in the order that they are\r\nneeded by that application.  You can track the status of implementation in\r\n[this Google spreadsheet][roadmap].  Eventually, I would like to cover the entire\r\nGitHub API, so contributions are of course [always welcome][contributing].  The\r\ncalling pattern is pretty well established, so adding new methods is relatively\r\nstraightforward.\r\n\r\n[roadmap]: https://docs.google.com/spreadsheet/ccc?key=0ApoVX4GOiXr-dGNKN1pObFh6ek1DR2FKUjBNZ1FmaEE&usp=sharing\r\n[contributing]: CONTRIBUTING.md\r\n\r\n\r\n## License ##\r\n\r\nThis library is distributed under the BSD-style license found in the [LICENSE](./LICENSE)\r\nfile.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}